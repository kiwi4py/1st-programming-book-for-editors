
故事：
经过译者、编辑姑娘无数个日日夜夜的辛勤努力，一百多本双语小说制作完成，待质检合格后，即可上线。结果铁面无私、火眼金睛的质检“老学究”反映，英文部分发现了中文内容，比如可能是编辑在编校过程添加的“质检”字样；英文单词内含有多余的连字符，比如“to-morrow”、“to-day”等。这批书需要通查，带着这些问题是不能上线的。编辑姑娘心想这如何是好，一百多本书，好多还是长篇小说，多长时间才能读完一遍啊！
编辑姑娘一边忙着联系实习生，一边想有没有简化工作的方法。她突然想起了上次找阿飞检测图书敏感词的问题。她抱着试试看的态度，给技术团队的同事发了封邮件，寻求帮助。
阿飞看了问题描述后，也觉得这个跟之前的敏感词问题挺像的。他要是能把英文中有问题的地方给标出来，可以帮助编辑节省下定位错误的时间。编辑只去复查他标出来的地方即可。经过一番思考之后，他说可以帮忙试着解决。
编辑姑娘得到答复之后，心里多少有些宽慰。但她并没有把全部赌注都押到他的身上。她招募了一名实习生，两人开始了枯燥的校对之旅。阿飞找她要了两份质检反映有问题的图书文件。他发现依旧是HTML文件，也就是说他可以像上次那样使用相同的方法为有问题的地方添加高亮样式。

解决问题的步骤如下：
分析问题
读取图书文件
找到有问题的地方
增加高亮样式
保存文件


图书文件
阿飞打开编辑姑娘发来的图书文件，寻找图书正文内容所在的文件。他发现目录结构是这样的：
/books
    /book1
        /html
            body.html
            copyright.html
            title.html
            toc.html
        ...
    /book2
        ...

每本书所在文件夹的目录层级结构是相同的。图书正文内容位于body.html文件中。他又找编辑姑娘要了更多文件，发现图书文件夹层级结构相同。

阿飞又用文本编辑器打开了一个body.html文件，这类文件将是他施展魔法之处。文件结构如下所示：
<html>
 	<head>
 	    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
 	    <link rel="stylesheet" href="../css/style.css" type="text/css" />
	    <title>正文</title>
	</head>
<body>
<div class="paragraph"><a name="chapter1"></a><h2></h2><h2></h2></div>
<div class="paragraph"><div class="en">The problem happens here。原文是不是有问题？</div><div class="zh"></div></div>
<div class="paragraph"><div class="en"></div><div class="zh"></div></div>
...
</body>
</html>






















